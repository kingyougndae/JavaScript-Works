//배열 : 순서가 있는 컬렉션을 저장할 때 쓰는 자료구조

//배열 선언 - 대부분 2번째 방법을 사용
let arr = new Array();
let arr = [];

// 대괄호 안에 초기요소 넣기 가능
let fruits = ["사과", "오렌지", "수박"];

// ✔️ 각 배열 요소는 "0"부터 시작하는 숫자(인덱스)가 매겨져 있다. 숫자 => 배열 내 순서 , // 배열 내 특정 요소를 얻고 싶으면 대괄호 안에 인덱스 넣어주면 된다.
let fruits =let fruits = ["사과", "오렌지", "수박"];

alert (fruits[0]); // 사과
alert (fruits[1]); // 오렌지
alert (fruits[2]); // 수박

// 같은 방법으로 요소 수정 가능
fruits[2] = "배"; // 배열이 ["사과","오렌지","배"]로 바뀜

// 새로운 요소를 배열에 추가 가능
fruits[3] = "레몬"; // 배열이 ["사과","오렌지","배","레몬"]로 바뀜

// "length"를 사용하면 배열에 담갠 요소가 몇 개인지 알수 있다.
let fruits = ["사과","오렌지","수박"];
alert(fruits.length); // 3

// "alert"사용해 요소 전체를 출력
let fruits = ["사과","오렌지","수박"];
alert(fruits); // 사과,오렌지,수박

// 배열 요소의 자료형엔 제약이 없다
// 요소에 여러가지 자료형이 섞여있다.
let arr =["사과", {name:'이보라'}, true, function(){alert('안녕하세요')}];

// 인덱스가 1인 요소(객체)의 name 프로퍼티 출력
alert (arr[1].name) // 이보라

// 인덱스가 3인 요소(함수) 실행
arr[3](); // 안녕하세요

// ‼️ trailing 쉼표 : 배열의 마지막 요소는 객체와 마찬가지로 쉼표로 끝날 수 있다.
let fruits =[
    "사과",
    "오렌지",
    "수박",
]; // trailing쉼표를 사용하면 모든 줄의 생김새가 유사해지기 때문에 요소를 넣고 빼기가 쉽다.

// pop.push와 shift.unshift
/*
큐(queue)는 배열을 사용해 만들 수 있는 대표적인 자료구조로, 배열과 마찬가지로 순서가 있는 컬렉션을 저장하는데 사용,
. push - 맨 끝에 요소를 추가 // . shift - 제일 앞 요소를 꺼내 제거한 후 남아있는 요소들을 앞으로 밀어줌 (2번 째 요소가 1번 째 요소가 됨)

배열은 큐 이외에 "스택(stack)"이라 불리는 자료구조를 구현할 때도 쓰임.
스택에서 사용하는 연산
push - 요소를 스택 끝에 집어 넣는다.
pop - 스택 끝 요소를 추출한다.
스택 : '한쪽 끝'에 요소를 더하거나 뺄 수 있게 해주는 자료구조
*/

// pop : 배열 끝 요소를 제거하고 제거한 요소를 반환
let fruits =["사과", "오렌지","수박"];

alert (fruits.pop()); // 배열에서 "수박"을 제거하고 제거 된 요소를 보여줌
alert (fruits); // 사과,오렌지

// push : 배열 끝에 요소를 추가
let fruits = ["사과", "오렌지"];
fruits.push("수박");
alert(fruits); // 사과, 오렌지, 수박

// fruits.push(...) = fruits[fruits.length] = .... 같은 효과

//배열 앞에 무언가를 해주는 메서드
// shift : 배열 앞 요소를 제거 , 제거한 요소를 반환
let fruits = ["사과","오렌지","수박"];
alert (fruits.shift()); // 배열에서 "사과"를 제거하고 제거 된 요소를 보여줌
alert (fruits); // 오렌지 , 수박

// unshift : 배열 앞에 요소를 추가
let fruits = [ "오렌지", "수박"];
fruits.unshift("사과");
alert (fruits); // 사과 ,오렌지, 수박

// push와 unshift는 요소 여러개를 한번에 더해줄 수 있다.
let fruits = ["사과"];

fruits.push("오렌지", "수박");
fruits.unshift("파인애플", "레몬"); // ["파인애플","레몬","사과","오렌지","수박"]

// 배열의 내부 동작 원리 - arr의 요소를 arr[0]처럼 대괄호를 사용해 접근하는 방식은 객체 문법,
// 배열은 자바스크립트의 7가지 '원시 자료형' x , 객체형에 속한다. 

// 배열의 내부 동작 원리
let fruits =["바나나"]
let arr = fruits; // 참조를 복사함 (두 변수 같은 객체 참조)
alert (arr === fruits); // true
arr.push('배'); // 참조를 이용해 배열을 수정
alert(fruits); // 바나나,배 - 요소가 두 개가 된다.

// 임의의 키를 사용해야 한다면 일반객체 "{}"가 적합한 자료구조

// 성능: push,pop 은 빠름 // shift,unshift는 느림
// pop 메서드는 요소를 옮기지 않는다. 각 요소의 인덱스는 유지 , 배열 끝에 무언가를 해주는 메서드의 실행 속도가 빠른 이유!
// push 메서드를 쓸 때도 유사한 동작이 일어나 // 속도가 빠르다.


// 반복문 - for 문은 배열을 순회할 때 쓰는 가장 오래된 방법 // 순회시엔 인덱스 사용
let arr = ["사과", "오렌지", "수박"];

for (let i = 0; i < arr.length; i++) {
    alert(arr[i]) ;
}

// 배열에 적용할 수 있는 또다른 순회 문법 "for...of"
let fruits = ["사과", "오렌지", "수박"];
//  배열 요소를 대상으로 반복 작업 수행
for (let fruit of fruits) {
    alert (fruits);
}

// "for...of" 사용하면 현재 요소의 '인덱스'는 얻을 수 없고, '값'만 얻을 수 있다. 배열의 요소 대상으로 반복작업을 할 떄 사용!!

// "length" 프로퍼티
let fruits =[];
fruits[123] = "사과";
alert (fruits.length); // 124 , 이렇게 사용 x

// "length" 프로퍼티의 특징 : 쓰기가 가능 "length"의 값을 수동으로 증가 (아무 일 x) , 값을 감소시키면 배열이 잘림 (짧아진 배열은 다시 되돌릴 수 없다.)
let arr = [1,2,3,4,5];

arr.length = 2; // 요소 2개만 남기고 자름
alert(arr); // [1,2]

arr.length = 5; // 본래 길이로 되돌림
alert(arr[3]); // undefined: 삭제 된 기존 요소들이 복구되지 않습니다.

// 이런 특징을 이용하면 "arr.length = 0;" 를 사용해 아주 간단하게 배열을 비울 수 있다.

// new Array()
let arr = new Array("사과","오렌지","기타");
// 대괄호 "[]" 사용하면 더 짧은 문법으로 배열을 만들 수 있기 떄문에 "new Array()"는 잘 사용 안함.

// ? 다차원 배열 ? : 배열 역시 배열의 요소가 될 수 있다. = 다차원 배열 , 행렬을 저장하는 용도 
let matrix = [
    [1,2,3],
    [4,5,6],
    [7,8,9]
];

alert(matrix[1][1]);

// ? toString ? : 배열엔 "toStirng" 메서드가 구현되어 있어, 호출하면 요소를 "," 구분한 문자열이 반환
let arr =[1,2,3];

alert(arr); // 1,2,3
alert(String(arr) === '1,2,3');

/*
요약
배열은 특수한 형태의 객체 , 순서가 있는 자료를 저장하고 관리하는 용도에 최적화 된 자료구조

- 선언 방법 

// 대괄호 (가장 많이 쓰이는 방법)
let arr = [item1,item2...];
// new Array (잘 쓰이지않음)
let arr = new Array(item1,item2...);

- length 프로퍼티는 배열의 길이 , 정확하게는 숫자형 인덱스 중 가장 큰 값에 1를 더한 값
배열 메서드는 length 프로퍼티를 자동으로 조정

push(...items) - items를 배열 끝에 더함
pop() - 배열 끝 요소를 제거 , 제거한 요소를 반환
shift() - 배열 처음 요소를 제거, 제거한 요소를 반환
unshift(...items) - items를 배열 처음에 더함

<반복 작업>
for (let i=0; i<arr.length; i++) - 가장 빠른 방법, 오래된 브라우저와 호환 됌
for (let item of arr) - 배열 요소에만 사용되는 모던한 문법
for (let i in arr) - 배열엔 절대 사용 ❌

